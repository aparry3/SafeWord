{"version":3,"sources":["../../../src/@ionic-native/plugins/speech-recognition/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,MAAA,EAAQ,OAAA,EAAS,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AACxE,OAAO,EAAE,UAAA,EAAW,MAAO,iBAAA,CAAkB;AA2C7C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAgDG;AASH,IAAa,iBAAiB;IAAS,qCAAiB;IAAxD;;IAmEA,CAAC;IAjEC;;;OAGG;IAEH,kDAAsB,GAAtB;QACE,MAAM,CAAC;IACT,CAAC;IAED;;;OAGG;IAMH,0CAAc,GAAd,UAAe,OAA2C;QACxD,MAAM,CAAC;IACT,CAAC;IAED;;OAEG;IAIH,yCAAa,GAAb;QACE,MAAM,CAAC;IACT,CAAC;IAED;;;OAGG;IAEH,iDAAqB,GAArB;QACE,MAAM,CAAC;IACT,CAAC;IAED;;;OAGG;IAEH,yCAAa,GAAb;QACE,MAAM,CAAC;IACT,CAAC;IAED;;;OAGG;IAEH,6CAAiB,GAAjB;QACE,MAAM,CAAC;IACT,CAAC;IAQH,wBAAC;AAAD,CAnEA,AAmEC,CAnEsC,iBAAiB,GAmEvD;AANM,4BAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,gCAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AA3DA;IADC,OAAO,EAAE;;;;+DAGT;AAWD;IALC,OAAO,CAAC;QACP,aAAa,EAAE,SAAS;QACxB,UAAU,EAAE,IAAI;KAEjB,CAAC;;;oCAC2D,UAAU;uDAEtE;AAQD;IAHC,OAAO,CAAC;QACP,SAAS,EAAE,CAAC,KAAK,CAAC;KACnB,CAAC;;;;sDAGD;AAOD;IADC,OAAO,EAAE;;;;8DAGT;AAOD;IADC,OAAO,EAAE;;;;sDAGT;AAOD;IADC,OAAO,EAAE;;;;0DAGT;AA3DU,iBAAiB;IAR7B,MAAM,CAAC;QACN,UAAU,EAAE,mBAAmB;QAC/B,MAAM,EAAE,kCAAkC;QAC1C,SAAS,EAAE,2BAA2B;QACtC,IAAI,EAAE,8DAA8D;QACpE,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;KAC9B,CAAC;GAEW,iBAAiB,CAmE7B;SAnEY,iBAAiB","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Plugin, Cordova, IonicNativePlugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs/Observable';\n\nexport type SpeechRecognitionListeningOptions = SpeechRecognitionListeningOptionsIOS | SpeechRecognitionListeningOptionsAndroid;\n\nexport interface SpeechRecognitionListeningOptionsIOS {\n  /**\n   * used language for recognition (default `\"en-US\"`)\n   */\n  language?: string;\n\n  /**\n   * umber of return matches (default `5`)\n   */\n  matches?: number;\n\n  /**\n   * Allow partial results to be returned (default `false`)\n   */\n  showPartial?: boolean;\n}\n\nexport interface SpeechRecognitionListeningOptionsAndroid {\n  /**\n   * used language for recognition (default `\"en-US\"`)\n   */\n  language?: string;\n\n  /**\n   * number of return matches (maximum number of matches)\n   */\n  matches?: number;\n\n  /**\n   * displayed prompt of listener popup window\n   */\n  prompt?: string;\n\n  /**\n   * display listener popup window with prompt (default `true`)\n   */\n  showPopup?: boolean;\n}\n\n/**\n * @name Speech Recognition\n * @description\n * This plugin does speech recognition using cloud services\n *\n * @usage\n * ```typescript\n * import { SpeechRecognition } from '@ionic-native/speech-recognition';\n *\n * constructor(private speechRecognition: SpeechRecognition) { }\n *\n * ...\n *\n *\n *\n * // Check feature available\n * this.speechRecognition.isRecognitionAvailable()\n *   .then((available: boolean) => console.log(available))\n *\n * // Start the recognition process\n * this.speechRecognition.startListening(options)\n *   .subscribe(\n *     (matches: Array<string>) => console.log(matches),\n *     (onerror) => console.log('error:', onerror)\n *   )\n *\n * // Stop the recognition process (iOS only)\n * this.speechRecognition.stopListening()\n *\n * // Get the list of supported languages\n * this.speechRecognition.getSupportedLanguages()\n *   .then(\n *     (languages: Array<string>) => console.log(languages),\n *     (error) => console.log(error)\n *   )\n *\n * // Check permission\n * this.speechRecognition.hasPermission()\n *   .then((hasPermission: boolean) => console.log(hasPermission))\n *\n * // Request permissions\n * this.speechRecognition.requestPermission()\n *   .then(\n *     () => console.log('Granted'),\n *     () => console.log('Denied')\n *   )\n *\n * ```\n */\n@Plugin({\n  pluginName: 'SpeechRecognition',\n  plugin: 'cordova-plugin-speechrecognition',\n  pluginRef: 'plugins.speechRecognition',\n  repo: 'https://github.com/pbakondy/cordova-plugin-speechrecognition',\n  platforms: ['Android', 'iOS']\n})\n\nexport class SpeechRecognition extends IonicNativePlugin {\n\n  /**\n   * Check feature available\n   * @return {Promise<boolean>}\n   */\n  @Cordova()\n  isRecognitionAvailable(): Promise<boolean> {\n    return;\n  }\n\n  /**\n   * Start the recognition process\n   * @return {Promise< Array<string> >} list of recognized terms\n   */\n  @Cordova({\n    callbackOrder: 'reverse',\n    observable: true,\n\n  })\n  startListening(options?: SpeechRecognitionListeningOptions): Observable<Array<string>> {\n    return;\n  }\n\n  /**\n   * Stop the recognition process\n   */\n  @Cordova({\n    platforms: ['iOS']\n  })\n  stopListening(): Promise<void> {\n    return;\n  }\n\n  /**\n   * Get the list of supported languages\n   * @return {Promise< Array<string> >} list of languages\n   */\n  @Cordova()\n  getSupportedLanguages(): Promise<Array<string>> {\n    return;\n  }\n\n  /**\n   * Check permission\n   * @return {Promise<boolean>} has permission\n   */\n  @Cordova()\n  hasPermission(): Promise<boolean> {\n    return;\n  }\n\n  /**\n   * Request permissions\n   * @return {Promise<void>}\n   */\n  @Cordova()\n  requestPermission(): Promise<void> {\n    return;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}